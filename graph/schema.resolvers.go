package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"
	"fmt"
	"github.com/k-nox/ddb-backend-developer-challenge/graph/generated"
	"github.com/k-nox/ddb-backend-developer-challenge/graph/model"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"math"
)

// DamageCharacter is the resolver for the damageCharacter field.
func (r *mutationResolver) DamageCharacter(ctx context.Context, input model.DamageInput) (*model.Character, error) {
	char, err := r.Query().Character(ctx, input.CharacterID)
	if err != nil {
		return nil, err
	}

	multiplier := 1.0
	for _, defense := range char.Defenses {
		if defense.DamageType == input.DamageType {
			multiplier, err = r.app.GetDefenseTypeModifier(defense.DefenseType)
			if err != nil {
				return nil, err
			}
			break
		}
	}

	totalDamage := int(math.Round(multiplier * float64(input.Roll)))

	if totalDamage > char.CurrentHitPoints {
		totalDamage = char.CurrentHitPoints
	}

	newHitPoints := char.CurrentHitPoints - totalDamage
	err = r.app.UpdateHitPoints(char.ID, newHitPoints)
	if err != nil {
		return nil, err
	}

	char.CurrentHitPoints = newHitPoints

	return char, nil
}

// HealCharacter is the resolver for the healCharacter field.
func (r *mutationResolver) HealCharacter(ctx context.Context, input model.HealInput) (*model.Character, error) {
	if input.Roll <= 0 {
		return nil, gqlerror.Errorf("roll %d is invalid; must be positive value", input.Roll)
	}

	char, err := r.Query().Character(ctx, input.CharacterID)
	if err != nil {
		return nil, err
	}

	newHitPoints := char.CurrentHitPoints + input.Roll
	if newHitPoints > char.MaxHitPoints {
		newHitPoints = char.MaxHitPoints
	}

	err = r.app.UpdateHitPoints(char.ID, newHitPoints)
	if err != nil {
		return nil, err
	}

	char.CurrentHitPoints = newHitPoints
	return char, nil
}

// AddTemporaryHitPoints is the resolver for the addTemporaryHitPoints field.
func (r *mutationResolver) AddTemporaryHitPoints(ctx context.Context, input model.HealInput) (*model.Character, error) {
	panic(fmt.Errorf("not implemented: AddTemporaryHitPoints - addTemporaryHitPoints"))
}

// Character is the resolver for the character field.
func (r *queryResolver) Character(ctx context.Context, id int) (*model.Character, error) {
	char, err := r.app.GetCharacterByID(id)
	if err != nil {
		return nil, err
	}
	defenses, err := r.app.GetCharacterDefenses(id)
	if err != nil {
		return nil, err
	}

	char.Defenses = defenses
	return char, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
